plugins {
    id 'distribution'
}

ext {
    shellBaseName = 'food-shell'
    libDir = 'lib'
}

dependencies {
    compile project(':core')

    compile "org.springframework:spring-context-support:$springVersion"

    compile('org.springframework.shell:spring-shell:1.1.0.RELEASE') {
        exclude group: 'org.springframework'
    }
}

task copyDependencies(type: Sync) {
    from configurations.compile - configurations.provided
    into "$buildDir/$libDir"
}

task copyShell(type: Copy) {
    dependsOn 'jar'
    from jar
    into "$buildDir/$libDir"
    rename { "${shellBaseName}.jar" }
}

jar {
    dependsOn 'copyDependencies'
    manifest {
        attributes(
                'Class-Path': (configurations.compile - configurations.provided).files.collect {
                    "${it.name}"
                }.join(" ")
        )
    }
}

task startScripts(type: GradleBuild) {
    outputs.dir project.file("$buildDir/scripts")

    buildFile 'dist.gradle'
    tasks = ['startScripts']
}

configure(distTar) {
    dependsOn 'startScripts', 'copyShell'
    archiveName = "$shellBaseName.${it.extension}"
}

distributions {
    main {
        baseName = shellBaseName
        contents {
            into('bin') {
                from startScripts
            }
            into("$libDir") {
                from {
                    "$buildDir/$libDir"
                }
            }
        }
    }
}

build.dependsOn 'distTar'

task buildVersionFile {
    ext {
        versionFile = project.file("src/main/resources/buildinfo.properties")
        branchName = System.getenv('GITFLOW_BRANCH')
        buildNumber = System.getenv('BUILD_NUMBER')
    }

    inputs.property "version", version
    inputs.property "branchName", branchName
    inputs.property "buildNumber", buildNumber
    outputs.files versionFile

    doLast {
        String buildVersion = version
        if (branchName) {
            buildVersion += ".${branchName[0].toLowerCase()}"
        }

        if (buildNumber) {
            buildVersion += "-${buildNumber}"
        }

        versionFile.text = "buildVersion = ${buildVersion}"
    }
}
compileJava.dependsOn 'buildVersionFile'